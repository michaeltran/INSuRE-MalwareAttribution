import pickle
import os.path
import io
from googleapiclient.http import MediaIoBaseDownload
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request


class Downloader:
    def __init__(self):
        self.file_id = "1UT9umtQKjrjSs3LF1lZreesWNQAiRqTb"
        self.target_dir = os.path.join(os.getcwd(), "../../data/")
        self.scopes = ["https://www.googleapis.com/auth/drive.readonly"]
        self.credentials_path = os.path.join(os.getcwd(), "credentials.json")
        self.creds = self.set_creds()

    def set_creds(self):
        # The file token.pickle stores the user's access and refresh tokens, and is
        # created automatically when the authorization flow completes for the first
        # time.
        if os.path.exists("token.pickle"):
            with open("token.pickle", "rb") as token:
                self.creds = pickle.load(token)
            # If there are no (valid) credentials available, let the user log in.
            if not self.creds or not self.creds.valid:
                self.update_creds()

    def update_creds(self):
        if self.creds and self.creds.expired and self.creds.refresh_token:
            self.creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                self.credentials_path, SCOPES
            )
            self.creds = flow.run_local_server()
        # Save the credentials for the next run
        with open("token.pickle", "wb") as token:
            pickle.dump(creds, token)

    def download_mal_dat(self):
        if not self.creds or not self.creds.valid:
            self.update_creds()
        else:
            service = build("drive", "v3", credentials=self.creds)
            # Call the Drive v3 API to download the zip into target
            request = service.files().get_media(fileId=file_id)
            fh = io.BytesIO()
            downloader = MediaIoBaseDownload(fh, request)
            done = False
            while done is False:
                status, done = downloader.next_chunk()
                print("Download %d%%." % int(status.progress() * 100))
