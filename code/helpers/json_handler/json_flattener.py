from itertools import chain, starmap


# The following class has methods either copied or modified from:
# https://towardsdatascience.com/how-to-flatten-deeply-nested-json-objects-in-non-recursive-elegant-python-55f96533103d


class JsonFlattener:
    from itertools import chain, starmap

    # the following VT features do not need not be flattened
    vt_stop_list = set([
        "additional_info.autostart.",
        "additional_info.behaviour-v1.hooking.",
        "additional_info.behaviour-v1.network.",
        "additional_info.behaviour-v1.service.",
        "additional_info.behaviour-v1.extra.",
        "additional_info.behaviour-v1.process.",
        "additional_info.behaviour-v1.hosts_file.",
        "additional_info.behaviour-v1.windows.",
        "additional_info.behaviour-v1.runtime-dlls.",
        "additional_info.behaviour-v1.mutex.",
        "additional_info.behaviour-v1.registry.",
        "additional_info.behaviour-v1.filesystem.",
        "additional_info.carbonblack_children.",
        "additional_info.carbonblack_parents.",
        "additional_info.compressed_parents.",
        "additional_info.contacted_domains.",
        "additional_info.contacted_ips.",
        "additional_info.contacted_urls.",
        "additional_info.detailed_email_parents.",
        "additional_info.email_parents.",
        "additional_info.embedded_domains.",
        "additional_info.embedded_ips.",
        "additional_info.embedded_urls.",
        "additional_info.execution_parents.",
        "additional_info.exiftool.",
        "additional_info.exports.",
        "additional_info.imports.",
        "additional_info.monitor_info.organizations",
        "additional_info.network_infrastructure.",
        "additional_info.nsrl.",
        "additional_info.overlay_parents.",
        "additional_info.pe-debug.",
        "additional_info.pe_resource_parents.",
        "additional_info.pe-resource-detail.",
        "additional_info.pe-resource-langs.",
        "additional_info.pe-resource-list.",
        "additional_info.pe-resource-types.",
        "additional_info.pcap_parents.",
        "additional_info.rombioscheck.",
        "additional_info.sections.",
        "additional_info.sigcheck.",
        "additional_info.software-collections.",
        "additional_info.trusted_verdicts.",
        "additional_info.wildpaths.",
        "additional_info.zemana-behaviour.",
        "ITW_urls.",
        "submission_names.",
        "tags."
    ])
        
    # the following VT keys are non-features
    vt_skip_list = set([
        "permalink.",
        "scans.",
        "times_submitted."
    ])

    # the following Cuckoo features do not need not be flattened
    cuckoo_stop_list = set([
        "behavior.apistats.",
        "behavior.generic.",
        "behavior.processes.",
        "behavior.processtree.",
        "behavior.summary.command_line.",
        "behavior.summary.connects_host.",
        "behavior.summary.connects_ip.",
        "behavior.summary.directory_created.",
        "behavior.summary.directory_enumerated.",
        "behavior.summary.directory_removed.",
        "behavior.summary.dll_loaded.",
        "behavior.summary.downloads_file.",
        "behavior.summary.fetches_url.",
        "behavior.summary.file_copied.",
        "behavior.summary.file_created.",
        "behavior.summary.file_deleted.",
        "behavior.summary.file_exists.",
        "behavior.summary.file_failed.",
        "behavior.summary.file_moved.",
        "behavior.summary.file_opened.",
        "behavior.summary.file_read.",
        "behavior.summary.file_written.",
        "behavior.summary.guid.",
        "behavior.summary.mutex.",
        "behavior.summary.file_recreated.",
        "behavior.summary.regkey_deleted.",
        "behavior.summary.regkey_opened.",
        "behavior.summary.regkey_read.",
        "behavior.summary.regkey_written.",
        "behavior.summary.resolves_host.",
        "behavior.summary.wmi_query.",
        "buffer.",
        "dropped.",
        "extracted.",
        "network.dead_hosts.",
        "network.dns.",
        "network.dns_servers.",
        "network.domains.",
        "network.http.",
        "network.http_ex.",
        "network.https_ex.",
        "network.hosts.",
        "network.icmp.",
        "network.irc.",
        "network.smtp_ex.",
        "network.tcp.",
        "network.udp.",
        "procmemory.",
        "signatures.",
        "static.pe_exports.",
        "static.pe_imports.",
        "static.pe_resources.",
        "static.pe_sections.",
        "static.pe_versioninfo.",
        "strings.",
        "target.file.urls.",
        "target.file.yara."
        ])

    # the following Cuckoo keys are non-features
    # possibly have a library missing that is messing with tls output
    cuckoo_skip_list = set([
        "info.",
        "network.tls.",  
        "behavior.summary.tls_master.",
        "debug.",
        "metadata.",
        "screenshots."
        ])


    def flatten_json_iterative_solution(self, dictionary):
        """Flatten a nested json file"""
        # Keep iterating until the termination condition is satisfied
        while True:
            # Keep unpacking the json file until all values are atomic elements (not dictionary or list)
            dictionary = dict(
                chain.from_iterable(starmap(self.unpack, dictionary.items()))
            )
            # Terminate condition: not any value in the json file is dictionary or list
            if not any(
                isinstance(value, dict) for value in dictionary.values()
            ) and not any(isinstance(value, list) for value in dictionary.values()):
                break

        return dictionary

    def unpack(self, parent_key, parent_value):
        """Unpack one level of nesting in json file"""
        # Unpack one level only!!!

        if isinstance(parent_value, dict):
            for key, value in parent_value.items():
                temp1 = parent_key + "~" + key
                yield temp1, value
        elif isinstance(parent_value, list):
            i = 0
            for value in parent_value:
                temp2 = parent_key + "~" + str(i)
                i += 1
                yield temp2, value
        else:
            yield parent_key, parent_value


    def flatten_json_recursive_solution(self, nested_json, report_type):
        """
            Flatten json object with nested keys into a single level.
            Args:
                nested_json: A nested json object.
            Returns:
                The flattened json object if successful, None otherwise.
        """
        out = {}
        def flatten(x, name=""):
            if (report_type == "virustotal") and (name not in JsonFlattener.vt_skip_list):
                if name in JsonFlattener.vt_stop_list: 
                    out[name[:-1]] = x
                elif type(x) is dict:
                    for a in x:
                        flatten(x[a], name + a + ".")
                elif type(x) is list:
                    i = 0
                    for a in x:
                        flatten(a, name + str(i) + ".")
                        i += 1
                else:
                    out[name[:-1]] = x
            elif (report_type == "cuckoo") and (name not in JsonFlattener.cuckoo_skip_list):  
                if name in JsonFlattener.cuckoo_stop_list: 
                    out[name[:-1]] = x
                elif type(x) is dict:
                    for a in x:
                        flatten(x[a], name + a + ".")
                elif type(x) is list:
                    i = 0
                    for a in x:
                        flatten(a, name + str(i) + ".")
                        i += 1
                else:
                    out[name[:-1]] = x


        flatten(nested_json)
        return out