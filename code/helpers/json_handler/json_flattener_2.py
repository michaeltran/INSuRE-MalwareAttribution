from itertools import chain, starmap


# The following class has methods either copied or modified from:
# https://towardsdatascience.com/how-to-flatten-deeply-nested-json-objects-in-non-recursive-elegant-python-55f96533103d
class JsonFlattener2:
    from itertools import chain, starmap

    def flatten_json_iterative_solution(self, dictionary):
        """Flatten a nested json file"""
        # Keep iterating until the termination condition is satisfied
        while True:
            # Keep unpacking the json file until all values are atomic elements (not dictionary or list)
            dictionary = dict(
                chain.from_iterable(starmap(self.unpack, dictionary.items()))
            )
            # Terminate condition: not any value in the json file is dictionary or list
            if not any(
                isinstance(value, dict) for value in dictionary.values()
            ) and not any(isinstance(value, list) for value in dictionary.values()):
                break

        return dictionary

    def unpack(self, parent_key, parent_value):
        """Unpack one level of nesting in json file"""
        # Unpack one level only!!!

        if isinstance(parent_value, dict):
            for key, value in parent_value.items():
                temp1 = parent_key + "_" + key
                yield temp1, value
        elif isinstance(parent_value, list):
            i = 0
            for value in parent_value:
                temp2 = parent_key + "_" + str(i)
                i += 1
                yield temp2, value
        else:
            yield parent_key, parent_value

        # Keep iterating until the termination condition is satisfied
        while True:
            # Keep unpacking the json file until all values are atomic elements (not dictionary or list)
            dictionary = dict(chain.from_iterable(starmap(unpack, dictionary.items())))
            # Terminate condition: not any value in the json file is dictionary or list
            if not any(
                isinstance(value, dict) for value in dictionary.values()
            ) and not any(isinstance(value, list) for value in dictionary.values()):
                break

            return dictionary
