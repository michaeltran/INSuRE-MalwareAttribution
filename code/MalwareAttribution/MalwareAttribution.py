import argparse
import pandas as pd
import time
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

from Classifier.Classifier import Classifier, Feature

clf = Classifier()

def main():
    start = time.time()

    ## Get Command-line Arguments #################
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--data', default='../../data', help='')
    opts = parser.parse_args()
    ###############################################

    training_data_dict = LoadData(opts.data, 'train_data.xlsx')
    testing_data_dict = LoadData(opts.data, 'test_data.xlsx')

    #nb_clf = clf.BuildClassifierNB(training_data_dict, training_data_dict['classification'], [Feature.IMPORTS_LIST])
    nb_clf = clf.BuildClassifierNB(training_data_dict, training_data_dict['classification'], 
        #[Feature.EMBEDDED_DOMAINS_LIST, Feature.TRID, Feature.PE_RESOURCE_LIST, Feature.IMPORTS_LIST, Feature.CONTACTED_URLS_LIST]
        [Feature.EMBEDDED_DOMAINS_LIST, Feature.TRID, Feature.PE_RESOURCE_LIST, Feature.IMPORTS_LIST, Feature.CONTACTED_URLS_LIST]
    )
    nb_predictions = nb_clf.predict(testing_data_dict)
    print("NB Accuracy: %0.2f" % (accuracy_score(testing_data_dict['classification'], nb_predictions)))

    end = time.time()
    print("Time Run = %fs" % (end - start))

def FeatureTesting():
    nb_clf = clf.BuildClassifierNB(training_data_dict, training_data_dict['classification'], [Feature.TRID, Feature.PE_RESOURCE_LIST])
    nb_predictions = nb_clf.predict(testing_data_dict)
    print("NB Accuracy: %0.2f" % (accuracy_score(testing_data_dict['classification'], nb_predictions)))

    #feats = nb_clf.named_steps['features']
    #X = feats.transform(training_data_dict)
    #Y = feats.transform(testing_data_dict)
    #print(X)
    #print(Y)

    return

def LoadData(data_folder_path, file_name):
    data_dict = {}
    data_dict['classification'] = []
    data_dict['embedded_domains_list'] = []
    data_dict['trid'] = []
    data_dict['pe_resource_list'] = []
    data_dict['imports_list'] = []
    data_dict['contacted_urls_list'] = []

    #data_dict['behavior_calls'] = []
    #data_dict['network_udp_src'] = []
    #data_dict['network_udp_dst'] = []

    df = pd.read_excel(data_folder_path + '/' + file_name, usecols=range(0, 20))
    for i in range(len(df['hash'])):
        #classification = df['classification'][i]
        #behavior_calls = df['behavior_calls'][i]
        #if behavior_calls != behavior_calls:
        #    behavior_calls = ''
        #network_udp_src = df['network_udp_src'][i]
        #if network_udp_src != network_udp_src:
        #    network_udp_src = ''
        #network_udp_dst = df['network_udp_dst'][i]
        #if network_udp_dst != network_udp_dst:
        #    network_udp_dst = ''

        embedded_domains_list = df['embedded_domains_list'][i]
        if embedded_domains_list != embedded_domains_list:
            embedded_domains_list = ''
        pe_resource_list = df['pe_resource_list'][i]
        if pe_resource_list != pe_resource_list:
            pe_resource_list = ''
        imports_list = df['imports_list'][i]
        if imports_list != imports_list:
            imports_list = ''
        contacted_urls_list = df['contacted_urls_list'][i]
        if contacted_urls_list != contacted_urls_list:
            contacted_urls_list = ''

        data_dict['classification'].append(df['classification'][i])
        data_dict['embedded_domains_list'].append(embedded_domains_list)
        data_dict['trid'].append(df['trid'][i])
        data_dict['pe_resource_list'].append(pe_resource_list)
        data_dict['imports_list'].append(imports_list)
        data_dict['contacted_urls_list'].append(contacted_urls_list)

        #data_dict['behavior_calls'].append(behavior_calls)
        #data_dict['network_udp_src'].append(network_udp_src)
        #data_dict['network_udp_dst'].append(network_udp_dst)

    return data_dict

if __name__ == '__main__':
    main()