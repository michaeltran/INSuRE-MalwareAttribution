import argparse
import pandas as pd
import time
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

from sklearn.naive_bayes import MultinomialNB

from Classifier.Classifier import Classifier

data_folder_path = '../../../data'

def main():
    start = time.time()

    ## Get Command-line Arguments #################
    parser = argparse.ArgumentParser()
    opts = parser.parse_args()
    ###############################################

    training_data_dict = LoadData('train_data.xlsx')
    testing_data_dict = LoadData('test_data.xlsx')

    clf = Classifier()
    nb_clf = clf.BuildClassifier(training_data_dict, training_data_dict['classification'], 'count', 'nb')

    #### Validate Model - k-fold Cross Validation ###
    #print("### Cross Validation Results ###")
    #print("Training Score: %f" % (nb_clf.score(training_data_dict, training_data_dict['classification'])))

    #feats = nb_clf.named_steps['features']
    #X = feats.transform(training_data_dict)
    #cv_scores = cross_val_score(MultinomialNB(), X, training_data_dict['classification'], cv=2, scoring='accuracy')
    #print("Cross Validation Scores:") 
    #print("Cross Validation Accuracy: %0.2f (+/- %0.2f)" % (cv_scores.mean(), cv_scores.std()))
    #print()
    #################################################

    nb_predictions = nb_clf.predict(testing_data_dict)
    print("NB Accuracy: %0.2f" % (accuracy_score(testing_data_dict['classification'], nb_predictions)))

    end = time.time()
    print("Time Run = %fs" % (end - start))

def LoadData(file_name):
    data_dict = {}
    data_dict['classification'] = []
    data_dict['behavior_calls'] = []
    data_dict['network_udp_src'] = []
    data_dict['network_udp_dst'] = []

    df = pd.read_excel(data_folder_path + '/' + file_name, usecols="A,B,C,D,E")
    for i in range(len(df['hash'])):
        classification = df['classification'][i]
        behavior_calls = df['behavior_calls'][i]
        if behavior_calls != behavior_calls:
            behavior_calls = ''
        network_udp_src = df['network_udp_src'][i]
        if network_udp_src != network_udp_src:
            network_udp_src = ''
        network_udp_dst = df['network_udp_dst'][i]
        if network_udp_dst != network_udp_dst:
            network_udp_dst = ''
        data_dict['classification'].append(classification)
        data_dict['behavior_calls'].append(behavior_calls)
        data_dict['network_udp_src'].append(network_udp_src)
        data_dict['network_udp_dst'].append(network_udp_dst)

    return data_dict

if __name__ == '__main__':
    main()