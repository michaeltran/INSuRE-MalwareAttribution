import os
import argparse
import re
import json
import xlsxwriter
import random

def PreProcessing(data_folder_path):
    static_label_path = data_folder_path + '/static_vt/labels'
    static_data_path = data_folder_path + '/static_vt/compact'
    dynamic_data_path = data_folder_path + '/cuckoo'

    # Check if data folders exists
    if not os.path.exists(static_label_path):
        print('Could not find labels: %s' % (os.path.abspath(static_label_path)))
        return
    if not os.path.exists(static_data_path):
        print('Could not find static data: %s' % (os.path.abspath(static_data_path)))
        return
    #if not os.path.exists(dynamic_data_path):
    #    print('Could not find dynamic data: %s' % (os.path.abspath(dynamic_data_path)))
    #    return

    malware_data = {}

    # Get all Malware Hashes and Labels
    classification_dict = {}
    for folder_name in os.listdir(static_label_path):
        with open(static_label_path + '/' + folder_name + '/' + folder_name + '_labels.txt', 'r') as file:
            for line in file:
                x = re.findall("(.*)\\t(.*)\\n", line)
                hash = x[0][0]
                label = x[0][1]
                classification_dict[hash] = label

    # Get Static Data
    for folder_name in os.listdir(static_data_path):
        for file_name in os.listdir(static_data_path + '/' + folder_name):
            hash = re.findall("(.*).json", file_name)[0]
            if hash not in classification_dict:
                continue
            classification = classification_dict[hash]
            # Check if Classification is Singleton (Means there is only one type of sample)
            if classification.startswith('SINGLETON'):
                continue
            with open(static_data_path + '/' + folder_name + '/' + file_name) as file:
                data = json.load(file)

                # Get the top ranked trid description
                trid_data = re.findall("(.*)\(.*%\)", data['additional_info']['trid'].split('\n')[0])[0]
                pe_resource_list = []
                if 'pe-resource-list' in data['additional_info']:
                    for pe_resource in data['additional_info']['pe-resource-list']:
                        pe_resource_list.append(pe_resource + ':' + data['additional_info']['pe-resource-list'][pe_resource].replace(" ", ""))
                
                    temp = {}
                    temp['hash'] = hash
                    temp['classification'] = classification
                    temp['trid'] = trid_data
                    temp['pe_resource_list'] = ' '.join(pe_resource_list)
                    malware_data[hash] = temp


    ## Get Malware Dynamic Data (Cuckoo)
    #for file_name in os.listdir(dynamic_data_path):
    #    x = re.findall("coo-(.*).json", file_name)
    #    hash = x[0]
    #    if hash not in classification_dict:
    #        continue
    #    classification = classification_dict[hash]
    #    # Check if Classification is Singleton (Means there is only one type of sample)
    #    if classification.startswith('SINGLETON'):
    #        continue
    #    with open(dynamic_data_path + '/' + file_name, 'r') as file:
    #        data = json.load(file)
    #        behavior_calls_api = []
    #        network_udp_src = []
    #        network_udp_dst = []

    #        # Get System Call Data
    #        if (len(data['behavior']['processes']) > 1):
    #            # TODO: It is very possible for timestamps to be the same, so we should handle this somehow
    #            behavior_calls = data['behavior']['processes'][1]['calls']
    #            behavior_calls = sorted(behavior_calls, key = lambda i: i['time'])
    #            for calls in behavior_calls:
    #                behavior_calls_api.append(calls['api'])

    #        # Get Network Data
    #        network_udp_data = data['network']['udp']
    #        network_udp_data = sorted(network_udp_data, key = lambda i: i['time'])
    #        for udp in network_udp_data:
    #            network_udp_src.append(udp['src'] + ':' + str(udp['sport']))
    #            network_udp_dst.append(udp['dst'] + ':' + str(udp['dport']))
            
    #        temp = {}
    #        temp['classification'] = classification
    #        temp['behavior_calls'] = ' '.join(behavior_calls_api)
    #        temp['network_udp_src'] = ' '.join(network_udp_src)
    #        temp['network_udp_dst'] = ' '.join(network_udp_dst)
    #        malware_data[hash] = temp

    all_malware_samples = []
    for key in malware_data:
        all_malware_samples.append(malware_data[key])

    # Save all Malware Samples 
    WriteToExcel(data_folder_path + '/data.xlsx', all_malware_samples)

    # Prune out anything with less than one instance of a class
    malware_class_dict = {}
    pruned_malware_class_dict = {}
    for key in malware_data:
        classification = malware_data[key]['classification']
        if classification in malware_class_dict:
            malware_class_dict[classification].append(malware_data[key])
        else:
            malware_class_dict[classification] = []
            malware_class_dict[classification].append(malware_data[key])

    for key in malware_class_dict:
        if len(malware_class_dict[key]) >= 3:
            pruned_malware_class_dict[key] = malware_class_dict[key]

    malware_data = []
    del malware_class_dict

    training_malware_data = []
    testing_malware_data = []
    validation_malware_data = []

    # Ensure at least one instance is in the training/test/validation set
    for key in pruned_malware_class_dict:
        training_malware_data.append(pruned_malware_class_dict[key][0])
        testing_malware_data.append(pruned_malware_class_dict[key][1])
        validation_malware_data.append(pruned_malware_class_dict[key][2])
        for i in range(3, len(pruned_malware_class_dict[key])):
            malware_data.append(pruned_malware_class_dict[key][i])

    # Randomly Split Malware Data into Training/Test/Validation Sets
    total_length = len(malware_data) + len(training_malware_data) + len(testing_malware_data) + len(validation_malware_data)
    training_size = int(total_length * (8 / 10))
    testing_size = int((total_length - training_size) / 2)
    validation_size = int((total_length - training_size) / 2)

    while len(training_malware_data) < training_size:
        i = random.choice(range(0, len(malware_data)))
        training_malware_data.append(malware_data[i])
        del malware_data[i]

    while len(testing_malware_data) < testing_size:
        i = random.choice(range(0, len(malware_data)))
        testing_malware_data.append(malware_data[i])
        del malware_data[i]

    while len(validation_malware_data) < validation_size:
        i = random.choice(range(0, len(malware_data)))
        validation_malware_data.append(malware_data[i])
        del malware_data[i]

    WriteToExcel(data_folder_path + '/validation_data.xlsx', validation_malware_data)
    WriteToExcel(data_folder_path + '/train_data.xlsx', training_malware_data)
    WriteToExcel(data_folder_path + '/test_data.xlsx', testing_malware_data)

def WriteToExcel(path, malware_data):
    with xlsxwriter.Workbook(path) as workbook:
        worksheet = workbook.add_worksheet();
        row = 0;
        col = 0;
        # Header Row
        worksheet.write(row, col, 'classification'); col += 1;
        worksheet.write(row, col, 'hash'); col += 1;
        worksheet.write(row, col, 'trid'); col += 1;
        worksheet.write(row, col, 'pe_resource_list'); col += 1;
        #worksheet.write(row, col, 'behavior_calls'); col += 1;
        #worksheet.write(row, col, 'network_udp_src'); col += 1;
        #worksheet.write(row, col, 'network_udp_dst'); col += 1;
        row += 1;
        # Data Rows
        for key in range(len(malware_data)):
            col = 0;
            worksheet.write(row, col, malware_data[key]['classification']); col += 1;
            worksheet.write(row, col, malware_data[key]['hash']); col += 1;
            worksheet.write(row, col, malware_data[key]['trid']); col += 1;
            worksheet.write(row, col, malware_data[key]['pe_resource_list']); col += 1;
            #worksheet.write(row, col, malware_data[key]['behavior_calls']); col += 1;
            #worksheet.write(row, col, malware_data[key]['network_udp_src']); col += 1;
            #worksheet.write(row, col, malware_data[key]['network_udp_dst']); col += 1;
            row += 1;

if __name__ == '__main__':
    ## Get Command-line Arguments #################
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--data', default='../../data', help='')
    opts = parser.parse_args()
    ###############################################

    PreProcessing(opts.data)