import numpy as np
from sklearn.preprocessing import FunctionTransformer
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder

from sklearn.feature_extraction.text import CountVectorizer

from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import LinearSVC

from sklearn.pipeline import Pipeline, FeatureUnion

from Classes.ItemSelector import ItemSelector

class Classifier(object):
    def BuildClassifierNB(self, training_data_dict, training_data_classification):
        ## Build and Train Model ######################
        vectorizer1 = CountVectorizer(analyzer='word', ngram_range=(1, 1), tokenizer=lambda x: x.split(' '))
        #vectorizer2 = CountVectorizer(analyzer='word', ngram_range=(1, 1), tokenizer=lambda x: x.split(' '))
        #vectorizer3 = CountVectorizer(analyzer='word', ngram_range=(1, 1), tokenizer=lambda x: x.split(' '))
        classifier = MultinomialNB()

        text_clf = Pipeline([
            ('features', FeatureUnion([
                #('behavior_calls', Pipeline([
                #    ('selector', ItemSelector(key='behavior_calls')),
                #    ('vectorizer', vectorizer1),
                #])),
                #('network_udp_src', Pipeline([
                #    ('selector', ItemSelector(key='network_udp_src')),
                #    ('vectorizer', vectorizer2),
                #])),
                #('network_udp_dst', Pipeline([
                #    ('selector', ItemSelector(key='network_udp_dst')),
                #    ('vectorizer', vectorizer3),
                #])),

                ('trid', Pipeline([
                    ('selector', ItemSelector(key='trid')),
                    ('toarray', FunctionTransformer(self.GetGenericArray, validate = False)),
                    ('onehot', OneHotEncoder(handle_unknown='ignore')),
                ])),
                ('pe_resource_list', Pipeline([
                    ('selector', ItemSelector(key='pe_resource_list')),
                    ('vectorizer', vectorizer1),
                ])),
            ])),
            ('clf', classifier)
        ])

        text_clf.fit(training_data_dict, training_data_classification)
        ###############################################

        feats = text_clf.named_steps['features']
        test = feats.transform(training_data_dict)
        #print(test[0])

        #print(vectorizer1.get_feature_names())
        #print(vectorizer2.get_feature_names())
        #print(vectorizer3.get_feature_names())

        return text_clf

    def GetGenericArray(self, x):
        return np.array([t for t in x]).reshape(-1, 1)

    def GetMultipleGenericArray(self, x):
        return x