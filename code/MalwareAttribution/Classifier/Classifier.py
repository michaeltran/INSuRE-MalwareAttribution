import numpy as np
from sklearn.preprocessing import FunctionTransformer
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OneHotEncoder

from sklearn.feature_extraction.text import CountVectorizer

from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import LinearSVC

from sklearn.pipeline import Pipeline, FeatureUnion

from Classes.ItemSelector import ItemSelector
from Classes.CustomLabelEncoder import CustomLabelEncoder

class Classifier(object):
    def GetVectorizer(self, vectorizer_type):
        vectorizer = None
        if vectorizer_type == 'count':
            vectorizer = CountVectorizer(analyzer='word', ngram_range=(1, 1), tokenizer=lambda x: x.split(' '))
        else:
            print('Unknown Vectorizer: %s' % (vectorizer_type))
        return vectorizer

    def GetClassifier(self, classifier_type):
        classifier = None
        if classifier_type == 'nb':
            classifier = MultinomialNB()
        elif classifier_type == 'svm':
            classifier = LinearSVC()
        else:
            print('Unknown Classifier: %s' % (classifier_type))
        return classifier

    def BuildClassifier(self, training_data_dict, training_data_classification, vectorizer_type, classifier_type):
        vectorizer2 = None
        vectorizer3 = None
        classifier = None

        ## Build and Train Model ######################
        vectorizer1 = self.GetVectorizer(vectorizer_type)
        vectorizer2 = self.GetVectorizer(vectorizer_type)
        vectorizer3 = self.GetVectorizer(vectorizer_type)
        classifier = self.GetClassifier(classifier_type)

        #le = LabelEncoder()
        #X = le.fit_transform(training_data_dict['trid'])
        #onehot = OneHotEncoder(categories='auto')
        #X = X.reshape(-1, 1)
        #X = onehot.fit_transform(X)

        text_clf = Pipeline([
            ('features', FeatureUnion([
                #('behavior_calls', Pipeline([
                #    ('selector', ItemSelector(key='behavior_calls')),
                #    ('vectorizer', vectorizer1),
                #])),
                #('network_udp_src', Pipeline([
                #    ('selector', ItemSelector(key='network_udp_src')),
                #    ('vectorizer', vectorizer2),
                #])),
                #('network_udp_dst', Pipeline([
                #    ('selector', ItemSelector(key='network_udp_dst')),
                #    ('vectorizer', vectorizer3),
                #])),

                #('trid', Pipeline([
                #    ('selector', ItemSelector(key='trid')),
                #    ('encoder', CustomLabelEncoder()),
                #    ('toarray', FunctionTransformer(self.GetGenericArray, validate = False)),
                #    ('onehot', OneHotEncoder(categories='auto')),
                #])),
                ('pe_resource_list', Pipeline([
                    ('selector', ItemSelector(key='pe_resource_list')),
                    ('vectorizer', vectorizer1),
                ])),
            ])),
            ('clf', classifier)
        ])

        text_clf.fit(training_data_dict, training_data_classification)
        ###############################################

        feats = text_clf.named_steps['features']
        test = feats.transform(training_data_dict)
        print(test[0])

        #print(vectorizer1.get_feature_names())
        #print(vectorizer2.get_feature_names())
        #print(vectorizer3.get_feature_names())

        return text_clf

    def GetGenericArray(self, x):
        return np.array([t for t in x]).reshape(-1, 1)

    def GetMultipleGenericArray(self, x):
        return x

    def GetIntArray(self, x):
        return x.astype(int)